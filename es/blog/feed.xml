<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Spyder Blog</title>
  <id>urn:uuid:a1aeb560-1c3d-3d4a-bd0b-639353c820c3</id>
  <updated>2018-08-13T00:00:00Z</updated>
  <link href="https://www.spyder-ide.org/es/blog/" />
  <link href="https://www.spyder-ide.org/es/blog/feed.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/ajdavis/lektor-atom" version="0.3">Lektor Atom Plugin</generator>
  <entry xml:base="https://www.spyder-ide.org/es/blog/webcast-quansight-ep1/">
    <title type="text">Spyder featured on Episode 1 of Open Source Directions web show</title>
    <id>urn:uuid:f2d0265c-8b6a-360b-a513-8cc50b2d4a87</id>
    <updated>2018-08-13T00:00:00Z</updated>
    <link href="https://www.spyder-ide.org/es/blog/webcast-quansight-ep1/" />
    <author>
      <name>camgerlach</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.quansight.com/&quot;&gt;Quansight&lt;/a&gt;, the company recently founded by NumPy, SciPy and Anaconda creator Travis Oliphant to help connect companies with open source communities built around data science and machine learning, just released Episode 1 of its live webcast series, and it was all about Spyder!
Spyder maintainer &lt;a href=&quot;https://github.com/ccordoba12&quot;&gt;Carlos Córdoba&lt;/a&gt;, recently hired by Quansight and funded part-time to work on Spyder development &lt;a href=&quot;https://www.spyder-ide.org/blog/spyder-status-2018-present/&quot;&gt;as we announced a few weeks ago&lt;/a&gt;, was the featured guest on the show.&lt;/p&gt;
&lt;p&gt;Carlos first shared his perspective on some of the key moments in Spyder's nearly 10-year development history, from its original creation by Pierre Raybaut and Carlos' initial involvement in the project to its &lt;a href=&quot;https://www.spyder-ide.org/blog/spyder-status-2018-past/&quot;&gt;more recent challenges and successes&lt;/a&gt;.
He also demonstrated basic usage of Spyder, as well as some of its standout features, in a live on-screen demo.
Carlos then went on to outline the current roadmap for Spyder 4 in the near future, and explained some of the key new features planned for it.
Finally, he took the time to answer a variety of Spyder-related questions asked live by viewers, ranging from specific current and planned Spyder features to suggestions on keeping a good work-life balance.
While technical difficulties (since identified and resolved) interrupted some of his commentary, particularly in the roadmap section, a full account of the latter will be published here shortly.&lt;/p&gt;
&lt;p&gt;If you missed the webcast, Quansight recorded it and uploaded it to their &lt;a href=&quot;https://www.youtube.com/channel/UChdlbCpQ_Wep04V9o0sGLWQ&quot;&gt;new Youtube channel&lt;/a&gt;, so you can watch it on-demand right here if you're curious about any of the above.
Give it a like if you enjoy it to show Quansight some love for helping support Spyder's further development!&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/vtLdH4VbACA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;We'll have a new post on the release of Spyder 3.3.1 (and 3.3.0) in a few days time, plus articles on our new docs, Spyder 4 beta 1, and our full roadmap all in the next week or so; there's plenty going on that you won't want to miss.
Keep it right here to catch all that—and in the meantime, happy Spydering!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.spyder-ide.org/es/blog/spyder-status-2018-present/">
    <title type="text">State of the Spyder, Part 2: Looking up</title>
    <id>urn:uuid:483dc435-2053-31ea-8307-3a2fcd569824</id>
    <updated>2018-07-23T00:00:00Z</updated>
    <link href="https://www.spyder-ide.org/es/blog/spyder-status-2018-present/" />
    <author>
      <name>camgerlach</name>
    </author>
    <content type="html">&lt;p&gt;After sharing some major milestones, development progress, and other tidbits from the past six months in &lt;a href=&quot;https://www.spyder-ide.org/blog/spyder-status-2018-past/&quot;&gt;Part 1&lt;/a&gt; of this series (check that one out first if you haven't already), we now have some amazing news to share with you all here in Part 2, along with other status updates.
That's not all, though—Part 3 will look ahead toward Spyder 4 and beyond, unveiling and explaining our full roadmap and going over the future possibilities even further afield.&lt;/p&gt;
&lt;h2 id=&quot;spyder-wins-numfocus-development-grant&quot;&gt;Spyder Wins NumFOCUS Development Grant&lt;/h2&gt;&lt;p&gt;First up, we're thrilled to announce a major part of what's making that plan possible (along with your support, of course!).
This May, Spyder was awarded a $3000 development grant from &lt;a href=&quot;https://www.numfocus.org/&quot;&gt;NumFOCUS&lt;/a&gt;, an organization promoting better science through open code, to help with finishing Spyder 4!
NumFOCUS is a nonprofit dedicated to supporting &lt;a href=&quot;https://www.numfocus.org/sponsored-projects&quot;&gt;key scientific computing projects&lt;/a&gt;; &lt;a href=&quot;https://www.numfocus.org/programs/sustainability&quot;&gt;promoting sustainability&lt;/a&gt; in the open source ecosystem; educating the next generation of scientists, engineers, developers and data analysts through their flagship &lt;a href=&quot;https://www.numfocus.org/programs/pydata&quot;&gt;PyData&lt;/a&gt; program; and enabling and inspiring the next generation through their &lt;a href=&quot;https://www.numfocus.org/programs/grants-sponsored-events&quot;&gt;grants, scholarships&lt;/a&gt; and &lt;a href=&quot;https://www.numfocus.org/programs/john-hunter-technology-fellowship&quot;&gt;fellowships&lt;/a&gt;, &lt;a href=&quot;https://www.numfocus.org/programs/diversity-inclusion&quot;&gt;diversity and inclusion program&lt;/a&gt;, and involvement in the &lt;a href=&quot;https://www.numfocus.org/programs/google-summer-code&quot;&gt;Google Summer of Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We applied for the funding back in March of this year, along with many other scientific Python projects, and were one of the fortunate projects selected after the review process.
The award runs from May through this November, and will enable multiple betas with new features to be released throughout 2018, with the first feature-complete release candidate of Spyder 4 planned by the year's end (we'll have more detail on all that in Part 3).
Check out our bio and the other projects that were funded over on the &lt;a href=&quot;https://www.numfocus.org/blog/numfocus-awards-development-grants-to-open-source-projects-spring-2018&quot;&gt;NumFOCUS announcement&lt;/a&gt;, and make sure to thank and support them if you get the chance.&lt;/p&gt;
&lt;h2 id=&quot;quansight-hires-spyder-maintainer;-helps-fund-development&quot;&gt;Quansight Hires Spyder Maintainer; Helps Fund Development&lt;/h2&gt;&lt;p&gt;Equally exciting, Spyder's maintainer, &lt;a href=&quot;https://github.com/ccordoba12&quot;&gt;Carlos Cordoba&lt;/a&gt;, was recently hired by &lt;a href=&quot;https://www.quansight.com/&quot;&gt;Quansight&lt;/a&gt;, the brand-new company headed by scientific Python luminary &lt;a href=&quot;https://twitter.com/teoliphant?lang=en&quot;&gt;Travis Oliphant&lt;/a&gt;!
The father of much of the modern PyData ecosystem including NumPy, SciPy and Numba, Travis has been instrumental in the dramatic growth of open-source data analysis with Python through founding or helping lead Enthought, Continuum/Anaconda, NumFOCUS, and more.
Quansight, Travis' newest venture, focuses on scaling up the PyData ecosystem to solve even larger and more integrated problems, connecting companies with the open-source tools that can benefit their business, and helping build a more robust ecosystem for open-source scientific development.&lt;/p&gt;
&lt;p&gt;As part of that mission, Carlos was hired through at least the end of 2018 to help make several open-source projects more sustainable in the long run, and I'm sure you all will be happy to hear that one of them will be our very own Spyder!
After previously helping support the project over at Anaconda, Travis and Quansight will fund Carlos to work part-time on Spyder development, helping the project continue to grow and evolve, and keeping Spyder 4 moving along at a faster pace.
Congratulations Carlos, and thanks to Travis and Quansight!&lt;/p&gt;
&lt;p&gt;Aside from those two, we also have several other potential long-term funding opportunities in the pipeline.
Stay tuned to hear more about those in the coming months.&lt;/p&gt;
&lt;h2 id=&quot;spyder-3.3.0-ready-to-go&quot;&gt;Spyder 3.3.0 Ready to Go&lt;/h2&gt;&lt;p&gt;Meanwhile, on the development side of things, we've just finished the rollout of the next update in the stable Spyder 3 line, 3.3.0, and will have a full post shortly going over the changes and enhancements in detail.
In brief, it has some significant under the hood revisions, cleaning house of some old end of life dependencies and legacy support (Python 3.3 and PyQt4/&amp;lt;5.5), and separates the IPython Console kernel code into a new &lt;code&gt;spyder-kernels&lt;/code&gt; package to make it easier for you to work with different Python environments and remote sessions, and easier for us to add exciting new features down the road.
Additionally, it adds new preferences options for console plotting and autocompletion, improves the usability and performance of Variable Explorer object viewers, includes a new, fully automated error reporting feature to make submitting reports faster, easier and more helpful, and contains a number of other minor improvements and usability enhancements, along with numerous bug fixes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-present/spyder-remote-kernel.png&quot; alt=&quot;A remote kernel running in a system console alongside Spyder&amp;#39;s connect to kernel dialog&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;spyder-4-public-beta-1-on-deck&quot;&gt;Spyder 4 Public Beta 1 on Deck&lt;/h2&gt;&lt;p&gt;We'll also be releasing the first public beta of Spyder 4 in the very near future, to allow users and developers to get their hands on the next generation of the IDE and start using and testing it as soon as possible.
There are far too many significant new features to list here, and they are more than worthy of their own full-length post, as there are many substantial changes to the Editor, Console, Variable Explorer, File Explorer, Outline Explorer, API and more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-present/spyder-4b1-preview-editor.png&quot; alt=&quot;Preview of the new Spyder 4 Editor, showing several of the mentioned features&quot;&gt;&lt;/p&gt;
&lt;p&gt;Some of the major highlights in the Editor include code folding, indentation guides, multiple line length indicators, a live class/method/function panel (&lt;em&gt;a la&lt;/em&gt; Visual Studio), many more shortcut commands, better comment/uncomment, and more.
The IPython Console gains the ability to start specialized Pylab, SymPy, and Cython consoles, and the Variable Explorer gets MultiIndex support, now natively handles all Pandas indexers, and can display sets in a dedicated GUI editor.
Meanwhile, the File Explorer now has multi-select functionality and can open any file with the user's OS-configured external default program, while the outline explorer can now group items by cell, and in multiple levels.
Finally, Spyder 4 exposes a public API for external plugins, offers more language translations, features several global UI improvements and has numerous under the hood and refactoring changes, and countless other enhancements big and small.
It's the future of Spyder, so if you'd like to get a taste of the cutting edge,  we'd love for you to try it when it drops and let us know what you think!&lt;/p&gt;
&lt;h2 id=&quot;spyder-documentation-reborn&quot;&gt;Spyder Documentation, Reborn&lt;/h2&gt;&lt;p&gt;Aside from Spyder 3 and 4, we've got another big ticket item for you all in the next few days: our brand new docs!
We've been working on a major overhaul of our documentation, which will saw its first official release with Spyder 3.3.0.
Our &lt;a href=&quot;https://pythonhosted.org/spyder/&quot;&gt;old docs&lt;/a&gt; were hosted on PyPI/PythonHosted and, with the freezing of that service, couldn't be updated.
Therefore, we've now moved to maintain them in a &lt;a href=&quot;https://github.com/spyder-ide/spyder-docs&quot;&gt;new dedicated repo&lt;/a&gt;, build, deploy and host them ourselves with &lt;a href=&quot;http://www.sphinx-doc.org/en/master/&quot;&gt;Sphinx&lt;/a&gt;, &lt;a href=&quot;https://drdoctr.github.io/doctr/&quot;&gt;doctr&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; on a subdomain of our new site making them more convenient, responsive and accessible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-present/spyder-docs-preview.png&quot; alt=&quot;Preview of new Spyder documentation website, displaying a modern theme/layout and better screenshots&quot;&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, we've taken the opportunity to perform a comprehensive overhaul from top to bottom, dramatically improving their usefulness to users.
We've greatly expanded many pages and sections and adding new ones, updated outdated references, performed an exhaustive copyedit over nearly every line of the text, developed and implemented a consistent style guide, transitioned to a modern theme with our own custom CSS extensions, added or replaced many  dozens of high-resolution screenshots, modified the source code and infrastructure to be easier to develop, build and maintain, and much more.
Even better, you can expect even more improvements in the coming months, as we further expand them toward the standard you'd expect for a feature-rich, multifaceted application like Spyder.
If you find an issue with them, see a section that could use expansion or improvement or even just have general actionable feedback feel free to open an &lt;a href=&quot;https://github.com/spyder-ide/spyder-docs/issues&quot;&gt;issue&lt;/a&gt; or send us a &lt;a href=&quot;https://github.com/spyder-ide/spyder-docs/pulls&quot;&gt;pull request&lt;/a&gt; on our &lt;a href=&quot;https://github.com/spyder-ide/spyder-docs&quot;&gt;new repo&lt;/a&gt;.
We'll have more information about what's new and our future plans when we officially release them shortly.&lt;/p&gt;
&lt;h2 id=&quot;more-news-and-notes&quot;&gt;More News and Notes&lt;/h2&gt;&lt;p&gt;Finally, we want to make sure you all can stay better informed of Spyder-related happenings going forward, as well as get the chance to interact directly with the Spyder team.&lt;/p&gt;
&lt;p&gt;We're planning on much more frequent announcements, status reports, news, and tutorials right here on our blog, as well as more timely updates on our social media, including our &lt;a href=&quot;https://www.facebook.com/SpyderIDE/notifications/&quot;&gt;Facebook page&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/Spyder_IDE&quot;&gt;Twitter account&lt;/a&gt;.
Make sure to subscribe/follow if you'd like to stay up to date or want to get in touch; we only post important happenings, so we won't inundate your feeds with trivialities.
You can also reach us on our &lt;a href=&quot;https://groups.google.com/forum/#!forum/spyderlib&quot;&gt;Google Groups discussion board&lt;/a&gt;, our &lt;a href=&quot;https://gitter.im/spyder-ide/public&quot;&gt;Gitter live chat&lt;/a&gt;, or post a comment right here below this post.&lt;/p&gt;
&lt;p&gt;Thanks again for all you do to make Spyder possible, and keep a look out for the next post in this series on the future of Spyder, along with our three major releases (3.3.0, 4.0b1, and the new docs) over the next few weeks.
Happy Spydering!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.spyder-ide.org/es/blog/spyder-status-2018-past/">
    <title type="text">State of the Spyder, Part 1: Looking back</title>
    <id>urn:uuid:298231ef-4e5e-3cbc-b8e2-41fd8ade2fd8</id>
    <updated>2018-05-06T00:00:00Z</updated>
    <link href="https://www.spyder-ide.org/es/blog/spyder-status-2018-past/" />
    <author>
      <name>camgerlach</name>
    </author>
    <content type="html">&lt;p&gt;As we approach some major development milestones, now is as good a time as ever to share with you some perspective on where we've been, what's happening now, and where we're going in the world of Spyder.
In this post, part one of a three part series, we'll take a look back over the past six months at some of the key events, accomplishments and challenges for Spyder and its community, and how that all leads up to where we are now.&lt;/p&gt;
&lt;p&gt;Stay tuned right here, since part two will share several exciting announcements that affect the project (in a good way, we promise!) and its immediate future.
Even better, part three will formally announce the next Spyder 3 release and—what I'm sure you are all looking forward to—the plan for the first official Spyder 4 beta, plus our schedule and feature roadmap for Spyder 4 and beyond!&lt;/p&gt;
&lt;h2 id=&quot;a-call-answered&quot;&gt;A Call Answered&lt;/h2&gt;&lt;p&gt;Starting off, as we announced back in mid-November, our funding from Anaconda, Inc was discontinued, leaving Spyder without formal institutional financial support.
As Spyder was, is and always will be a community-developed and supported IDE, this was far from a mortal blow to the project, but it did impact the pace and breadth of development.
Developer effort previously spent on our Spyder plugins, like &lt;a href=&quot;https://github.com/spyder-ide/spyder-notebook&quot;&gt;spyder-notebook&lt;/a&gt;, &lt;a href=&quot;https://github.com/spyder-ide/spyder-reports&quot;&gt;spyder-reports&lt;/a&gt;, and &lt;a href=&quot;https://github.com/spyder-ide/spyder-terminal&quot;&gt;spyder-terminal&lt;/a&gt;, among others, was refocused on the Spyder core, and the development and release of Spyder 4 was put mostly on hold.
To help make up for the loss of funding, we appealed to the community for support, asking users who found Spyder valuable to back our project on &lt;a href=&quot;https://opencollective.com/spyder&quot;&gt;OpenCollective&lt;/a&gt;, in order to accelerate development and fund more features for Spyder 4.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-past/spyder_opencollective.png&quot; alt=&quot;Spyder OpenCollective, showing many donations and backers&quot;&gt;&lt;/p&gt;
&lt;p&gt;To our unending gratitude, you responded! In the few months since then, we've gone from zero to a budget of well over $4500 per year and rising at an increasing pace, thanks to the continuing contributions of over 80 (and counting!) individual and institutional backers.
We also had several new core team members and community contributors pitch in to help carry the load, and we've got some more great news in the very next post on the funding front.
While we've got a ways to go to match the level of funding we've received under Anaconda, your support has helped make possible several of the new features we've planned for Spyder 4, and allow us to commit to releasing it much sooner than we would be able to otherwise.
Your generous donations go directly toward funding the Spyder community's most-requested new and improved features for Spyder 4, so keep them coming!
Stay tuned; we are considering rolling out new donation tiers and rewards at some point soon so you won't want to miss that.&lt;/p&gt;
&lt;h2 id=&quot;development-by-the-numbers&quot;&gt;Development by the Numbers&lt;/h2&gt;&lt;p&gt;On the development side of the project, while our overall pace is modestly lower than its peak under our Anaconda funding, we've been quite active fixing bugs and adding new features and enhancements over the past six months.
By the numbers, since mid-November, we've pushed approximately 1200 commits to &lt;code&gt;master&lt;/code&gt; (Spyder 4), comprising over 37 000 lines added and 16 000 removed, and 900 commits to &lt;code&gt;3.x&lt;/code&gt; (Spyder 3), with over 16 500 additions and 10 000 deletions.
Users have opened over 1375 issues (bugs, feature requests and other feedback), of which we've managed to resolve more than 1330, or nearly 97%.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-past/github_commit_history.png&quot; alt=&quot;Github commit timeseries for Spyder, with high activity over the past few years&quot;&gt;&lt;/p&gt;
&lt;p&gt;Further, over 250 pull requests from almost two dozen unique contributors, some old, some new, have been submitted since that time—fixing bugs, adding new or enhanced functionality, or making other improvements—of which 226 have been merged to the main Spyder codebase.
This work has coalesced into four separate official releases during that period, with another only days away.
Finally, we've recently blown past the 3000 Github stars milestone a few weeks ago (we're now at more than 3200), with almost 700 unique forks to date.&lt;/p&gt;
&lt;h2 id=&quot;key-spyder-improvements&quot;&gt;Key Spyder Improvements&lt;/h2&gt;&lt;p&gt;All those numbers are nice, but what matters most are the tangible improvements that you all get to use every day in your favorite IDE.
Over those same past six months, alongside hundreds of bugfixes and minor enhancements, we've made multiple significant improvements to the Spyder 3 Editor, IPython Console, Variable Explorer, and Find in Files tool, along with a number of others under the hood and to the application as a whole.
Even better, the majority of these were suggested by you, our users, and some of you even pitched in to help implement them.&lt;/p&gt;
&lt;p&gt;Especially since you will probably be spending most of your time in it, we added a several new commands and functions to the &lt;strong&gt;Editor&lt;/strong&gt; that will hopefully make your life easier, each with corresponding customizable shortcuts for easier access.
You can now insert a new line below the current one regardless of the cursor's current position with &lt;code&gt;Ctrl-Shift-Enter&lt;/code&gt;, and you can now use &lt;code&gt;Shift-Delete&lt;/code&gt; to cut selected text, and &lt;code&gt;Shift-Insert&lt;/code&gt; to paste it.
&lt;code&gt;Ctrl-PageUp&lt;/code&gt;, &lt;code&gt;Ctrl-PageDown&lt;/code&gt;, and &lt;code&gt;Ctrl-Tab&lt;/code&gt; shortcuts are all now fully configurable.
Finally, you can now easily &lt;code&gt;Tab&lt;/code&gt; from the &lt;code&gt;Find&lt;/code&gt; to the &lt;code&gt;Replace&lt;/code&gt; box when open, and better yet your &lt;code&gt;Find&lt;/code&gt; text is automatically copied to the &lt;code&gt;Replace&lt;/code&gt; box to make modifications easier.&lt;/p&gt;
&lt;p&gt;Second only to the Editor in terms of them most critical Spyder components, the &lt;strong&gt;IPython Console&lt;/strong&gt; also got a lot of love in recent releases.
We've made several improvements to significantly improve the startup time, and added an optional feature to show the elapsed time each kernel has been running.
You can now remove all user-defined variables with a GUI command, and changes in &lt;code&gt;import&lt;/code&gt;ed modules now take effect instantly and automatically in the console, without even a re-&lt;code&gt;import&lt;/code&gt; needed.
&lt;code&gt;Cloudpickle&lt;/code&gt; is now used to serialize objects from the Console to the Variable Explorer, greatly improving the latter's capabilities (as discussed below).
Finally, Cython files are now automatically run in dedicated Cython consoles, and you can now use the edit magic command from the Console to open any file right inside Spyder's Editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-past/varexp_array_display.png&quot; alt=&quot;Variable Explorer, with a variety of array types displayed&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Variable Explorer&lt;/strong&gt;, which many of you cite as Spyder's &quot;killer feature&quot;, has greatly improved as well.
Most notably, thanks to the aforementioned &lt;code&gt;cloudpickle&lt;/code&gt; change, you now have access to rich, deep exploration of nearly any object, builtin or custom, and can traverse, view, and when possible even edit complex hierarchies of nested types with ease.
The Variable Explorer now fully supports &lt;code&gt;Timedelta&lt;/code&gt; objects, both built-in and &lt;code&gt;Pandas&lt;/code&gt; variants, allowing you to easily view and edit them just like &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;Timestamp&lt;/code&gt;.
It also now uses a &quot;pretty&quot;, more human-readable format for dates, times, timedeltas and the like, and also now supports displaying a much wider range of &lt;code&gt;Numpy&lt;/code&gt; array types.
As a quality of life change, it has much better handling of immutable types, like &lt;code&gt;tuples&lt;/code&gt;, clearly showing they can't be edited upfront and avoiding bothersome errors when trying to do so.&lt;/p&gt;
&lt;p&gt;Rounding out the major changes, the &lt;strong&gt;Find in Files&lt;/strong&gt; tool now allows you to remove items from the &lt;code&gt;Search In&lt;/code&gt; list by hovering over them and pressing &lt;code&gt;Delete&lt;/code&gt;, and there's also a new option to clear all recent directories.
Under the hood, we've made &lt;code&gt;PyQt5&lt;/code&gt; a dependency for easier, one-command installation and added many more tests and better project infrastructure to help catch errors.
To make things easier on you if something does go wrong, we've greatly improved the error reporting system, the UI/UX and the explanatory text to be more up to date, informative, and user friendly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-past/error_report_dialog.png&quot; alt=&quot;New Spyder error report dialog, with more helpful UI text&quot;&gt;&lt;/p&gt;
&lt;p&gt;All of the mentioned additions are included in the latest released version of Spyder, 3.2.8, which you can update to with &lt;code&gt;conda update spyder&lt;/code&gt; (if using Anaconda), with your package manager/distribution (if installed that way) or with &lt;code&gt;pip update spyder&lt;/code&gt; (otherwise).
Even more are already implemented for our next release, due out in a week's time, and we'll have a preview of what to expect right here on the blog even sooner.&lt;/p&gt;
&lt;h2 id=&quot;affiliated-project-progress&quot;&gt;Affiliated Project Progress&lt;/h2&gt;&lt;p&gt;Outside the core Spyder IDE, while most plugins have been paused until the Spyder 4 release, work on other affiliated projects has continued. The new &lt;a href=&quot;https://github.com/spyder-ide/spyder-unittest&quot;&gt;spyder-unittest&lt;/a&gt; plugin has seen particularly active development, and lead developer and Spyder team member &lt;a href=&quot;http://www1.maths.leeds.ac.uk/~jitse/&quot;&gt;Jitse Niesen&lt;/a&gt; recently published a &lt;a href=&quot;https://www.spyder-ide.org/blog/introducing-unittest-plugin/&quot;&gt;tutorial on its use&lt;/a&gt;.
Since November, it has gotten improved &lt;code&gt;pytest&lt;/code&gt; support with realtime test results and click-to-open, better UI/UX, a robust communications backend (ZeroMQ), and numerous bug fixes and minor improvements.
&lt;a href=&quot;https://github.com/spyder-ide/qtpy&quot;&gt;QtPy&lt;/a&gt;, another affiliated project which Spyder uses as its Qt GUI abstraction layer, has had three releases including one major, with new Qt classes, early support for &lt;code&gt;PySide2&lt;/code&gt;, better performance, and a number of bugfixes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/spyder-status-2018-past/spyder_unittest.png&quot; alt=&quot;Spyder-unittest dialog, displaying test results&quot;&gt;&lt;/p&gt;
&lt;p&gt;Other projects under the Spyder umbrella are also making major progress. The &lt;a href=&quot;https://github.com/spyder-ide/pywinpty&quot;&gt;pywinpty&lt;/a&gt; pseudo-terminal library has seen six official releases (three major), with a new rich high level interface to create and track processes, new process wrappers, Python 2.7 support, major performance, stability and security improvements, and many bug fixes.
Most importantly, we are proud to report that since this January Jupyter Notebook (in 5.3.0) and JupyterLab have both adopted it to create and manage system terminals on Windows!
The &lt;a href=&quot;https://github.com/spyder-ide/qtsass&quot;&gt;qtsass&lt;/a&gt; SASS to Qt stylesheet compiler has a new maintainer, with development including new dev infrastructure, refactoring work, a PyPI release, and new features, with more on the way.
Finally, our &lt;a href=&quot;https://github.com/spyder-ide/loghub&quot;&gt;loghub&lt;/a&gt; automatic changelog generator has seen significant internal and external developer interest, as well as three releases, bug fixes, additional examples, and the ability to group issues and PRs together if desired.
The common thread between all five of these projects has been a substantially increased development pace in recent weeks, so expect to see even more good news soon if that trend continues.&lt;/p&gt;
&lt;h2 id=&quot;beyond-the-code&quot;&gt;Beyond the Code&lt;/h2&gt;&lt;p&gt;The team has made progress on a number of fronts outside core program development.
We've been joined by several new team members from around the world, who have each contributed new skillsets to the project.
Further, we've created, developed and deployed a brand new, modern and responsive website and blog, to provide an accessible, central source for Spyder news and information for both newcomers and old hands alike, as you might have noticed :)&lt;/p&gt;
&lt;p&gt;Our new, comprehensive &lt;a href=&quot;https://github.com/spyder-ide/spyder/wiki/Troubleshooting-Guide-and-FAQ&quot;&gt;Troubleshooting Guide and FAQ&lt;/a&gt; will help users easily resolve common issues without having to wait for a response from us, and we've revised and improved our Github issue tracking workflow to do an even better job at quickly responding to users' needs.
On top of that, our Readme, contributing guide, install docs, and developer wiki have all been throughly overhauled to make them more up to date, informative and accessible.
Finally, we've deepened our relationship with &lt;a href=&quot;https://www.numfocus.org/&quot;&gt;NumFOCUS&lt;/a&gt;, integrating us more closely with the broader PyData community, as well as leading to some exciting news...but that will have to wait for our next post!&lt;/p&gt;
&lt;p&gt;Until then, thanks for all you do for us and the community, and happy Spydering!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.spyder-ide.org/es/blog/introducing-unittest-plugin/">
    <title type="text">Introducing the unittest plugin</title>
    <id>urn:uuid:a68fed32-87cb-37fb-a01e-7f53de562592</id>
    <updated>2018-02-23T00:00:00Z</updated>
    <link href="https://www.spyder-ide.org/es/blog/introducing-unittest-plugin/" />
    <author>
      <name>jitseniesen</name>
    </author>
    <content type="html">&lt;p&gt;Automatic testing can increase the quality of your code. This is especially true of dynamic languages like Python, where a typo may only be noticed when that particular code path is executed. The new &lt;a href=&quot;https://github.com/spyder-ide/spyder-unittest&quot;&gt;Spyder unittest plugin&lt;/a&gt; lets you run tests and view the results, all within the IDE. Here, I'll demonstrate what it can do by way of a real-world example.&lt;/p&gt;
&lt;p&gt;There are numerous unit testing frameworks available for Python, of which the plugin supports several of the most prominent. However, I'm using my favorite here, &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt;. I prefer to write the tests in a separate file from the code, so that's what I'll do here.&lt;/p&gt;
&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the plugin&lt;/h2&gt;&lt;p&gt;If you use the Anaconda distribution (as we recommend), then you can install the Spyder unittest plugin with the command&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;conda install -c spyder-ide spyder-unittest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will also grab all its mandatory dependencies (including Spyder itself if necessary). The &lt;code&gt;-c&lt;/code&gt; option instructs &lt;code&gt;conda&lt;/code&gt; to use the custom channel &lt;code&gt;spyder-ide&lt;/code&gt; run by the Spyder developers, since the plugin isn't part of the default channel.&lt;/p&gt;
&lt;p&gt;Since we will be using the &lt;code&gt;pytest&lt;/code&gt; framework, you also need to install it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;conda install pytest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll be running Python 3.6.4, Spyder 3.2.6, &lt;code&gt;spyder-unittest&lt;/code&gt; 0.3.0 and &lt;code&gt;pytest&lt;/code&gt; 3.3.2 for this example.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-project&quot;&gt;Creating a project&lt;/h2&gt;&lt;p&gt;I'll be using separate files for the tests and the code to be tested, so let's start by creating a project which will contain these files. In the &lt;code&gt;Projects&lt;/code&gt; menu, click on &lt;code&gt;New Project ...&lt;/code&gt;. Enter a name for the project (in my example, &lt;code&gt;prime_example&lt;/code&gt;), and under &lt;code&gt;Location&lt;/code&gt;, select the directory in which to store it. Click &lt;code&gt;Create&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/introducing-unittest-plugin/new-project.png&quot; alt=&quot;&amp;#34;Create new project&amp;#34; window&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;writing-code-to-be-tested&quot;&gt;Writing code to be tested&lt;/h2&gt;&lt;p&gt;Create a Python file &lt;code&gt;primes.py&lt;/code&gt; with the following function, which checks whether a number is prime:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;def is_prime(number):
    &amp;quot;&amp;quot;&amp;quot;Return True if `number` is prime.&amp;quot;&amp;quot;&amp;quot;
    for element in range(2, number):
        if number % element == 0:
            return False
    return True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example is taken from the blog post &lt;a href=&quot;https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/&quot;&gt;Improve Your Python: Understanding Unit Testing&lt;/a&gt; by Jeff Knupp.&lt;/p&gt;
&lt;h2 id=&quot;writing-the-tests&quot;&gt;Writing the tests&lt;/h2&gt;&lt;p&gt;To test our &lt;code&gt;is_prime&lt;/code&gt; function, we will write two tests: one to check that &lt;code&gt;5&lt;/code&gt; is considered a prime, and one to ensure &lt;code&gt;4&lt;/code&gt; is not. They can be implemented as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;from primes import is_prime

def test_five_is_prime():
    assert is_prime(5) == True

def test_four_is_not_prime():
    assert is_prime(4) == False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the cool things about &lt;code&gt;pytest&lt;/code&gt; is that it can find the tests automatically, so you don't need to mark them in any way. By default &lt;code&gt;pytest&lt;/code&gt; uses a naming convention: all functions starting with &lt;code&gt;test_&lt;/code&gt; in files starting with &lt;code&gt;test_&lt;/code&gt; are considered test functions. We'll save the code in the file &lt;code&gt;test_primes.py&lt;/code&gt; which follows this naming convention.&lt;/p&gt;
&lt;p&gt;In Spyder, the project now looks as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/introducing-unittest-plugin/code.png&quot; alt=&quot;Spyder window with code&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;running-the-tests&quot;&gt;Running the tests&lt;/h2&gt;&lt;p&gt;Now comes the fun part, where we actually get to use the plugin. In the &lt;code&gt;Run&lt;/code&gt; menu, select &lt;code&gt;Run unit tests&lt;/code&gt;. If you do not see this menu item, then the plugin is not installed; refer to the installation instructions above.&lt;/p&gt;
&lt;p&gt;A window appears in which to configure the test run. One of the advantages of using a project is that it is automatically selected as the directory in which to find tests (another advantage is that Spyder will remember the testing configuration). So the only thing we need to do is select the test framework, which is &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/introducing-unittest-plugin/test-config.png&quot; alt=&quot;&amp;#34;Configure tests&amp;#34; window&quot;&gt;&lt;/p&gt;
&lt;p&gt;Press the &lt;code&gt;OK&lt;/code&gt; button to run the tests, and lo and behold, the results appear in a new pane called &quot;Unit testing&quot;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/introducing-unittest-plugin/test-results.png&quot; alt=&quot;Test results in Spyder windows&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, both tests pass. This means that our function correctly identifies &lt;code&gt;5&lt;/code&gt; as prime and &lt;code&gt;4&lt;/code&gt; as not prime.&lt;/p&gt;
&lt;h2 id=&quot;a-failing-test&quot;&gt;A failing test&lt;/h2&gt;&lt;p&gt;Unfortunately, our function &lt;code&gt;is_prime&lt;/code&gt; has a bug. The number &lt;code&gt;1&lt;/code&gt; is not considered a prime, but &lt;code&gt;is_prime(1)&lt;/code&gt; in fact returns &lt;code&gt;True&lt;/code&gt;. Therefore, to test for this, we add the following code to &lt;code&gt;test_primes.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;def test_one_is_not_prime():
    assert is_prime(1) == False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, run the tests again by clicking on &lt;code&gt;Run unit tests&lt;/code&gt; in the &lt;code&gt;Run&lt;/code&gt; menu. Spyder remembers the configuration so you are not asked for it again. This time, the results are:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/es/blog/introducing-unittest-plugin/test-results2.png&quot; alt=&quot;Test results in Spyder windows&quot;&gt;&lt;/p&gt;
&lt;p&gt;Our new test fails. The details clarify that &lt;code&gt;is_prime(1)&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, while the assert in the test function claims that it should return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here&lt;/h2&gt;&lt;p&gt;With this demonstration under your belt, you should be able to write tests for your code and run them with the plugin. For example, try fixing the bug so that &lt;code&gt;1&lt;/code&gt; is correctly identified as non-prime, and run the tests again to check verify it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spyder-unittest&lt;/code&gt; supports not only the &lt;code&gt;pytest&lt;/code&gt; framework, but also the &lt;code&gt;nose&lt;/code&gt; framework and the &lt;code&gt;unittest&lt;/code&gt; module in the Python standard library. It is still fairly new (as its version number suggests), so I look forward to your comments. Please send your ideas, bug reports and pull requests to the &lt;a href=&quot;https://github.com/spyder-ide/spyder-unittest&quot;&gt;spyder-unittest&lt;/a&gt; repo on Github.&lt;/p&gt;
&lt;p&gt;Happy Spydering with automatic tests!&lt;/p&gt;
</content>
  </entry>
</feed>
